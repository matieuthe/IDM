/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.csvmanl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CsvManGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.csvmanl.CsvMan.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProgramAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cInstructionAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cInstructionInstructionParserRuleCall_1_0_0 = (RuleCall)cInstructionAssignment_1_0.eContents().get(0);
		private final RuleCall cNLTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Program:
		//	{Program} (instruction+=Instruction NL)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Program} (instruction+=Instruction NL)*
		public Group getGroup() { return cGroup; }
		
		//{Program}
		public Action getProgramAction_0() { return cProgramAction_0; }
		
		//(instruction+=Instruction NL)*
		public Group getGroup_1() { return cGroup_1; }
		
		//instruction+=Instruction
		public Assignment getInstructionAssignment_1_0() { return cInstructionAssignment_1_0; }
		
		//Instruction
		public RuleCall getInstructionInstructionParserRuleCall_1_0_0() { return cInstructionInstructionParserRuleCall_1_0_0; }
		
		//NL
		public RuleCall getNLTerminalRuleCall_1_1() { return cNLTerminalRuleCall_1_1; }
	}
	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.csvmanl.CsvMan.Instruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCreateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLoadParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cShowParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cUpdateParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAddParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cJoinParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cDeleteParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cExitParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cCommentParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cCopyParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cRemoveParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		
		//Instruction:
		//	Create | Load | Show | Update | Add | Join | Delete | Exit | Comment | Copy | Remove;
		@Override public ParserRule getRule() { return rule; }
		
		//Create | Load | Show | Update | Add | Join | Delete | Exit | Comment | Copy | Remove
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Create
		public RuleCall getCreateParserRuleCall_0() { return cCreateParserRuleCall_0; }
		
		//Load
		public RuleCall getLoadParserRuleCall_1() { return cLoadParserRuleCall_1; }
		
		//Show
		public RuleCall getShowParserRuleCall_2() { return cShowParserRuleCall_2; }
		
		//Update
		public RuleCall getUpdateParserRuleCall_3() { return cUpdateParserRuleCall_3; }
		
		//Add
		public RuleCall getAddParserRuleCall_4() { return cAddParserRuleCall_4; }
		
		//Join
		public RuleCall getJoinParserRuleCall_5() { return cJoinParserRuleCall_5; }
		
		//Delete
		public RuleCall getDeleteParserRuleCall_6() { return cDeleteParserRuleCall_6; }
		
		//Exit
		public RuleCall getExitParserRuleCall_7() { return cExitParserRuleCall_7; }
		
		//Comment
		public RuleCall getCommentParserRuleCall_8() { return cCommentParserRuleCall_8; }
		
		//Copy
		public RuleCall getCopyParserRuleCall_9() { return cCopyParserRuleCall_9; }
		
		//Remove
		public RuleCall getRemoveParserRuleCall_10() { return cRemoveParserRuleCall_10; }
	}
	public class DeleteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.csvmanl.CsvMan.Delete");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDeleteAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDeleteKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCsvtableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cCsvtableCsvTableCrossReference_2_0 = (CrossReference)cCsvtableAssignment_2.eContents().get(0);
		private final RuleCall cCsvtableCsvTableIDTerminalRuleCall_2_0_1 = (RuleCall)cCsvtableCsvTableCrossReference_2_0.eContents().get(1);
		
		//Delete:
		//	{Delete}
		//	'delete' csvtable=[CsvTable];
		@Override public ParserRule getRule() { return rule; }
		
		//{Delete} 'delete' csvtable=[CsvTable]
		public Group getGroup() { return cGroup; }
		
		//{Delete}
		public Action getDeleteAction_0() { return cDeleteAction_0; }
		
		//'delete'
		public Keyword getDeleteKeyword_1() { return cDeleteKeyword_1; }
		
		//csvtable=[CsvTable]
		public Assignment getCsvtableAssignment_2() { return cCsvtableAssignment_2; }
		
		//[CsvTable]
		public CrossReference getCsvtableCsvTableCrossReference_2_0() { return cCsvtableCsvTableCrossReference_2_0; }
		
		//ID
		public RuleCall getCsvtableCsvTableIDTerminalRuleCall_2_0_1() { return cCsvtableCsvTableIDTerminalRuleCall_2_0_1; }
	}
	public class CopyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.csvmanl.CsvMan.Copy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCopyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCopyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAliasAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cAliasCsvTableCrossReference_2_0 = (CrossReference)cAliasAssignment_2.eContents().get(0);
		private final RuleCall cAliasCsvTableIDTerminalRuleCall_2_0_1 = (RuleCall)cAliasCsvTableCrossReference_2_0.eContents().get(1);
		private final Keyword cInKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTableAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTableCsvTableParserRuleCall_4_0 = (RuleCall)cTableAssignment_4.eContents().get(0);
		
		//Copy:
		//	{Copy}
		//	'copy' alias=[CsvTable] 'in' table=CsvTable;
		@Override public ParserRule getRule() { return rule; }
		
		//{Copy} 'copy' alias=[CsvTable] 'in' table=CsvTable
		public Group getGroup() { return cGroup; }
		
		//{Copy}
		public Action getCopyAction_0() { return cCopyAction_0; }
		
		//'copy'
		public Keyword getCopyKeyword_1() { return cCopyKeyword_1; }
		
		//alias=[CsvTable]
		public Assignment getAliasAssignment_2() { return cAliasAssignment_2; }
		
		//[CsvTable]
		public CrossReference getAliasCsvTableCrossReference_2_0() { return cAliasCsvTableCrossReference_2_0; }
		
		//ID
		public RuleCall getAliasCsvTableIDTerminalRuleCall_2_0_1() { return cAliasCsvTableIDTerminalRuleCall_2_0_1; }
		
		//'in'
		public Keyword getInKeyword_3() { return cInKeyword_3; }
		
		//table=CsvTable
		public Assignment getTableAssignment_4() { return cTableAssignment_4; }
		
		//CsvTable
		public RuleCall getTableCsvTableParserRuleCall_4_0() { return cTableCsvTableParserRuleCall_4_0; }
	}
	public class CreateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.csvmanl.CsvMan.Create");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCreateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCreateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCsvtableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCsvtableCsvTableParserRuleCall_2_0 = (RuleCall)cCsvtableAssignment_2.eContents().get(0);
		
		//Create:
		//	{Create}
		//	'create' csvtable=CsvTable;
		@Override public ParserRule getRule() { return rule; }
		
		//{Create} 'create' csvtable=CsvTable
		public Group getGroup() { return cGroup; }
		
		//{Create}
		public Action getCreateAction_0() { return cCreateAction_0; }
		
		//'create'
		public Keyword getCreateKeyword_1() { return cCreateKeyword_1; }
		
		//csvtable=CsvTable
		public Assignment getCsvtableAssignment_2() { return cCsvtableAssignment_2; }
		
		//CsvTable
		public RuleCall getCsvtableCsvTableParserRuleCall_2_0() { return cCsvtableCsvTableParserRuleCall_2_0; }
	}
	public class LoadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.csvmanl.CsvMan.Load");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLoadAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLoadKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFichierAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFichierEStringParserRuleCall_2_0 = (RuleCall)cFichierAssignment_2.eContents().get(0);
		private final Keyword cAsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCsvtableAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCsvtableCsvTableParserRuleCall_4_0 = (RuleCall)cCsvtableAssignment_4.eContents().get(0);
		
		//Load:
		//	{Load}
		//	'load' fichier=EString 'as' csvtable=CsvTable;
		@Override public ParserRule getRule() { return rule; }
		
		//{Load} 'load' fichier=EString 'as' csvtable=CsvTable
		public Group getGroup() { return cGroup; }
		
		//{Load}
		public Action getLoadAction_0() { return cLoadAction_0; }
		
		//'load'
		public Keyword getLoadKeyword_1() { return cLoadKeyword_1; }
		
		//fichier=EString
		public Assignment getFichierAssignment_2() { return cFichierAssignment_2; }
		
		//EString
		public RuleCall getFichierEStringParserRuleCall_2_0() { return cFichierEStringParserRuleCall_2_0; }
		
		//'as'
		public Keyword getAsKeyword_3() { return cAsKeyword_3; }
		
		//csvtable=CsvTable
		public Assignment getCsvtableAssignment_4() { return cCsvtableAssignment_4; }
		
		//CsvTable
		public RuleCall getCsvtableCsvTableParserRuleCall_4_0() { return cCsvtableCsvTableParserRuleCall_4_0; }
	}
	public class ShowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.csvmanl.CsvMan.Show");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cShowAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cShowKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCsvtableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cCsvtableCsvTableCrossReference_2_0 = (CrossReference)cCsvtableAssignment_2.eContents().get(0);
		private final RuleCall cCsvtableCsvTableIDTerminalRuleCall_2_0_1 = (RuleCall)cCsvtableCsvTableCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cColonneAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cColonneEStringParserRuleCall_3_1_0 = (RuleCall)cColonneAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cColonneAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cColonneEStringParserRuleCall_3_2_1_0 = (RuleCall)cColonneAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Assignment cWhereAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cWhereWhereParserRuleCall_4_0 = (RuleCall)cWhereAssignment_4.eContents().get(0);
		
		//Show:
		//	{Show}
		//	'show' csvtable=[CsvTable] ('(' colonne+=EString (',' colonne+=EString)* ')')? where=Where?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Show} 'show' csvtable=[CsvTable] ('(' colonne+=EString (',' colonne+=EString)* ')')? where=Where?
		public Group getGroup() { return cGroup; }
		
		//{Show}
		public Action getShowAction_0() { return cShowAction_0; }
		
		//'show'
		public Keyword getShowKeyword_1() { return cShowKeyword_1; }
		
		//csvtable=[CsvTable]
		public Assignment getCsvtableAssignment_2() { return cCsvtableAssignment_2; }
		
		//[CsvTable]
		public CrossReference getCsvtableCsvTableCrossReference_2_0() { return cCsvtableCsvTableCrossReference_2_0; }
		
		//ID
		public RuleCall getCsvtableCsvTableIDTerminalRuleCall_2_0_1() { return cCsvtableCsvTableIDTerminalRuleCall_2_0_1; }
		
		//('(' colonne+=EString (',' colonne+=EString)* ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//colonne+=EString
		public Assignment getColonneAssignment_3_1() { return cColonneAssignment_3_1; }
		
		//EString
		public RuleCall getColonneEStringParserRuleCall_3_1_0() { return cColonneEStringParserRuleCall_3_1_0; }
		
		//(',' colonne+=EString)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//colonne+=EString
		public Assignment getColonneAssignment_3_2_1() { return cColonneAssignment_3_2_1; }
		
		//EString
		public RuleCall getColonneEStringParserRuleCall_3_2_1_0() { return cColonneEStringParserRuleCall_3_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
		
		//where=Where?
		public Assignment getWhereAssignment_4() { return cWhereAssignment_4; }
		
		//Where
		public RuleCall getWhereWhereParserRuleCall_4_0() { return cWhereWhereParserRuleCall_4_0; }
	}
	public class UpdateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.csvmanl.CsvMan.Update");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUpdateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cUpdateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCsvtableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cCsvtableCsvTableCrossReference_2_0 = (CrossReference)cCsvtableAssignment_2.eContents().get(0);
		private final RuleCall cCsvtableCsvTableIDTerminalRuleCall_2_0_1 = (RuleCall)cCsvtableCsvTableCrossReference_2_0.eContents().get(1);
		private final Keyword cSetKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParameterAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParameterParameterParserRuleCall_4_0 = (RuleCall)cParameterAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cParameterAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cParameterParameterParserRuleCall_5_1_0 = (RuleCall)cParameterAssignment_5_1.eContents().get(0);
		private final Assignment cWhereAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cWhereWhereParserRuleCall_6_0 = (RuleCall)cWhereAssignment_6.eContents().get(0);
		
		//Update:
		//	{Update}
		//	'update' csvtable=[CsvTable] 'set' parameter+=Parameter (',' parameter+=Parameter)* where=Where?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Update} 'update' csvtable=[CsvTable] 'set' parameter+=Parameter (',' parameter+=Parameter)* where=Where?
		public Group getGroup() { return cGroup; }
		
		//{Update}
		public Action getUpdateAction_0() { return cUpdateAction_0; }
		
		//'update'
		public Keyword getUpdateKeyword_1() { return cUpdateKeyword_1; }
		
		//csvtable=[CsvTable]
		public Assignment getCsvtableAssignment_2() { return cCsvtableAssignment_2; }
		
		//[CsvTable]
		public CrossReference getCsvtableCsvTableCrossReference_2_0() { return cCsvtableCsvTableCrossReference_2_0; }
		
		//ID
		public RuleCall getCsvtableCsvTableIDTerminalRuleCall_2_0_1() { return cCsvtableCsvTableIDTerminalRuleCall_2_0_1; }
		
		//'set'
		public Keyword getSetKeyword_3() { return cSetKeyword_3; }
		
		//parameter+=Parameter
		public Assignment getParameterAssignment_4() { return cParameterAssignment_4; }
		
		//Parameter
		public RuleCall getParameterParameterParserRuleCall_4_0() { return cParameterParameterParserRuleCall_4_0; }
		
		//(',' parameter+=Parameter)*
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//parameter+=Parameter
		public Assignment getParameterAssignment_5_1() { return cParameterAssignment_5_1; }
		
		//Parameter
		public RuleCall getParameterParameterParserRuleCall_5_1_0() { return cParameterParameterParserRuleCall_5_1_0; }
		
		//where=Where?
		public Assignment getWhereAssignment_6() { return cWhereAssignment_6; }
		
		//Where
		public RuleCall getWhereWhereParserRuleCall_6_0() { return cWhereWhereParserRuleCall_6_0; }
	}
	public class AddElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.csvmanl.CsvMan.Add");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAddAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAddKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cValeurAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cValeurEStringParserRuleCall_2_0_1_0 = (RuleCall)cValeurAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_0_2 = (Group)cGroup_2_0.eContents().get(2);
		private final Keyword cCommaKeyword_2_0_2_0 = (Keyword)cGroup_2_0_2.eContents().get(0);
		private final Assignment cValeurAssignment_2_0_2_1 = (Assignment)cGroup_2_0_2.eContents().get(1);
		private final RuleCall cValeurEStringParserRuleCall_2_0_2_1_0 = (RuleCall)cValeurAssignment_2_0_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_0_3 = (Keyword)cGroup_2_0.eContents().get(3);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParameterAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParameterParameterParserRuleCall_2_1_1_0 = (RuleCall)cParameterAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_1_2 = (Group)cGroup_2_1.eContents().get(2);
		private final Keyword cCommaKeyword_2_1_2_0 = (Keyword)cGroup_2_1_2.eContents().get(0);
		private final Assignment cParameterAssignment_2_1_2_1 = (Assignment)cGroup_2_1_2.eContents().get(1);
		private final RuleCall cParameterParameterParserRuleCall_2_1_2_1_0 = (RuleCall)cParameterAssignment_2_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_1_3 = (Keyword)cGroup_2_1.eContents().get(3);
		private final Keyword cInKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCsvtableAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cCsvtableCsvTableCrossReference_4_0 = (CrossReference)cCsvtableAssignment_4.eContents().get(0);
		private final RuleCall cCsvtableCsvTableEStringParserRuleCall_4_0_1 = (RuleCall)cCsvtableCsvTableCrossReference_4_0.eContents().get(1);
		
		//Add:
		//	{Add}
		//	'add' ('(' valeur+=EString (',' valeur+=EString)* ')' | '(' parameter+=Parameter (',' parameter+=Parameter)* ')')
		//	'in' csvtable=[CsvTable|EString];
		@Override public ParserRule getRule() { return rule; }
		
		//{Add} 'add' ('(' valeur+=EString (',' valeur+=EString)* ')' | '(' parameter+=Parameter (',' parameter+=Parameter)* ')')
		//'in' csvtable=[CsvTable|EString]
		public Group getGroup() { return cGroup; }
		
		//{Add}
		public Action getAddAction_0() { return cAddAction_0; }
		
		//'add'
		public Keyword getAddKeyword_1() { return cAddKeyword_1; }
		
		//'(' valeur+=EString (',' valeur+=EString)* ')' | '(' parameter+=Parameter (',' parameter+=Parameter)* ')'
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'(' valeur+=EString (',' valeur+=EString)* ')'
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0_0() { return cLeftParenthesisKeyword_2_0_0; }
		
		//valeur+=EString
		public Assignment getValeurAssignment_2_0_1() { return cValeurAssignment_2_0_1; }
		
		//EString
		public RuleCall getValeurEStringParserRuleCall_2_0_1_0() { return cValeurEStringParserRuleCall_2_0_1_0; }
		
		//(',' valeur+=EString)*
		public Group getGroup_2_0_2() { return cGroup_2_0_2; }
		
		//','
		public Keyword getCommaKeyword_2_0_2_0() { return cCommaKeyword_2_0_2_0; }
		
		//valeur+=EString
		public Assignment getValeurAssignment_2_0_2_1() { return cValeurAssignment_2_0_2_1; }
		
		//EString
		public RuleCall getValeurEStringParserRuleCall_2_0_2_1_0() { return cValeurEStringParserRuleCall_2_0_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_0_3() { return cRightParenthesisKeyword_2_0_3; }
		
		//'(' parameter+=Parameter (',' parameter+=Parameter)* ')'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1_0() { return cLeftParenthesisKeyword_2_1_0; }
		
		//parameter+=Parameter
		public Assignment getParameterAssignment_2_1_1() { return cParameterAssignment_2_1_1; }
		
		//Parameter
		public RuleCall getParameterParameterParserRuleCall_2_1_1_0() { return cParameterParameterParserRuleCall_2_1_1_0; }
		
		//(',' parameter+=Parameter)*
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }
		
		//','
		public Keyword getCommaKeyword_2_1_2_0() { return cCommaKeyword_2_1_2_0; }
		
		//parameter+=Parameter
		public Assignment getParameterAssignment_2_1_2_1() { return cParameterAssignment_2_1_2_1; }
		
		//Parameter
		public RuleCall getParameterParameterParserRuleCall_2_1_2_1_0() { return cParameterParameterParserRuleCall_2_1_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_1_3() { return cRightParenthesisKeyword_2_1_3; }
		
		//'in'
		public Keyword getInKeyword_3() { return cInKeyword_3; }
		
		//csvtable=[CsvTable|EString]
		public Assignment getCsvtableAssignment_4() { return cCsvtableAssignment_4; }
		
		//[CsvTable|EString]
		public CrossReference getCsvtableCsvTableCrossReference_4_0() { return cCsvtableCsvTableCrossReference_4_0; }
		
		//EString
		public RuleCall getCsvtableCsvTableEStringParserRuleCall_4_0_1() { return cCsvtableCsvTableEStringParserRuleCall_4_0_1; }
	}
	public class JoinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.csvmanl.CsvMan.Join");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJoinAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cJoinKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTablesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTablesCsvTableCrossReference_2_0 = (CrossReference)cTablesAssignment_2.eContents().get(0);
		private final RuleCall cTablesCsvTableIDTerminalRuleCall_2_0_1 = (RuleCall)cTablesCsvTableCrossReference_2_0.eContents().get(1);
		private final Assignment cTablesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTablesCsvTableCrossReference_3_0 = (CrossReference)cTablesAssignment_3.eContents().get(0);
		private final RuleCall cTablesCsvTableIDTerminalRuleCall_3_0_1 = (RuleCall)cTablesCsvTableCrossReference_3_0.eContents().get(1);
		private final Keyword cInKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTable3Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTable3CsvTableParserRuleCall_5_0 = (RuleCall)cTable3Assignment_5.eContents().get(0);
		
		//Join:
		//	{Join}
		//	'join' tables+=[CsvTable] tables+=[CsvTable] 'in' table3=CsvTable;
		@Override public ParserRule getRule() { return rule; }
		
		//{Join} 'join' tables+=[CsvTable] tables+=[CsvTable] 'in' table3=CsvTable
		public Group getGroup() { return cGroup; }
		
		//{Join}
		public Action getJoinAction_0() { return cJoinAction_0; }
		
		//'join'
		public Keyword getJoinKeyword_1() { return cJoinKeyword_1; }
		
		//tables+=[CsvTable]
		public Assignment getTablesAssignment_2() { return cTablesAssignment_2; }
		
		//[CsvTable]
		public CrossReference getTablesCsvTableCrossReference_2_0() { return cTablesCsvTableCrossReference_2_0; }
		
		//ID
		public RuleCall getTablesCsvTableIDTerminalRuleCall_2_0_1() { return cTablesCsvTableIDTerminalRuleCall_2_0_1; }
		
		//tables+=[CsvTable]
		public Assignment getTablesAssignment_3() { return cTablesAssignment_3; }
		
		//[CsvTable]
		public CrossReference getTablesCsvTableCrossReference_3_0() { return cTablesCsvTableCrossReference_3_0; }
		
		//ID
		public RuleCall getTablesCsvTableIDTerminalRuleCall_3_0_1() { return cTablesCsvTableIDTerminalRuleCall_3_0_1; }
		
		//'in'
		public Keyword getInKeyword_4() { return cInKeyword_4; }
		
		//table3=CsvTable
		public Assignment getTable3Assignment_5() { return cTable3Assignment_5; }
		
		//CsvTable
		public RuleCall getTable3CsvTableParserRuleCall_5_0() { return cTable3CsvTableParserRuleCall_5_0; }
	}
	public class RemoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.csvmanl.CsvMan.Remove");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRemoveAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRemoveKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCsvtableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cCsvtableCsvTableCrossReference_2_0 = (CrossReference)cCsvtableAssignment_2.eContents().get(0);
		private final RuleCall cCsvtableCsvTableIDTerminalRuleCall_2_0_1 = (RuleCall)cCsvtableCsvTableCrossReference_2_0.eContents().get(1);
		private final Assignment cWhereAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cWhereWhereParserRuleCall_3_0 = (RuleCall)cWhereAssignment_3.eContents().get(0);
		
		//Remove:
		//	{Remove}
		//	'remove' csvtable=[CsvTable] where=Where?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Remove} 'remove' csvtable=[CsvTable] where=Where?
		public Group getGroup() { return cGroup; }
		
		//{Remove}
		public Action getRemoveAction_0() { return cRemoveAction_0; }
		
		//'remove'
		public Keyword getRemoveKeyword_1() { return cRemoveKeyword_1; }
		
		//csvtable=[CsvTable]
		public Assignment getCsvtableAssignment_2() { return cCsvtableAssignment_2; }
		
		//[CsvTable]
		public CrossReference getCsvtableCsvTableCrossReference_2_0() { return cCsvtableCsvTableCrossReference_2_0; }
		
		//ID
		public RuleCall getCsvtableCsvTableIDTerminalRuleCall_2_0_1() { return cCsvtableCsvTableIDTerminalRuleCall_2_0_1; }
		
		//where=Where?
		public Assignment getWhereAssignment_3() { return cWhereAssignment_3; }
		
		//Where
		public RuleCall getWhereWhereParserRuleCall_3_0() { return cWhereWhereParserRuleCall_3_0; }
	}
	public class ExitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.csvmanl.CsvMan.Exit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExitAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cExitKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Exit:
		//	{Exit}
		//	'exit';
		@Override public ParserRule getRule() { return rule; }
		
		//{Exit} 'exit'
		public Group getGroup() { return cGroup; }
		
		//{Exit}
		public Action getExitAction_0() { return cExitAction_0; }
		
		//'exit'
		public Keyword getExitKeyword_1() { return cExitKeyword_1; }
	}
	public class WhereElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.csvmanl.CsvMan.Where");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWhereAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWhereKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionConditionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cConditionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cConditionConditionParserRuleCall_3_1_0 = (RuleCall)cConditionAssignment_3_1.eContents().get(0);
		
		//Where:
		//	{Where}
		//	'where' condition+=Condition (',' condition+=Condition)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Where} 'where' condition+=Condition (',' condition+=Condition)*
		public Group getGroup() { return cGroup; }
		
		//{Where}
		public Action getWhereAction_0() { return cWhereAction_0; }
		
		//'where'
		public Keyword getWhereKeyword_1() { return cWhereKeyword_1; }
		
		//condition+=Condition
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_2_0() { return cConditionConditionParserRuleCall_2_0; }
		
		//(',' condition+=Condition)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//condition+=Condition
		public Assignment getConditionAssignment_3_1() { return cConditionAssignment_3_1; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_3_1_0() { return cConditionConditionParserRuleCall_3_1_0; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.csvmanl.CsvMan.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConditionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cColonneAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cColonneEStringParserRuleCall_1_0 = (RuleCall)cColonneAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final RuleCall cOPTerminalRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		private final Assignment cValeurAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValeurEStringParserRuleCall_3_0 = (RuleCall)cValeurAssignment_3.eContents().get(0);
		
		//Condition:
		//	{Condition} colonne=EString ('=' | OP) valeur=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{Condition} colonne=EString ('=' | OP) valeur=EString
		public Group getGroup() { return cGroup; }
		
		//{Condition}
		public Action getConditionAction_0() { return cConditionAction_0; }
		
		//colonne=EString
		public Assignment getColonneAssignment_1() { return cColonneAssignment_1; }
		
		//EString
		public RuleCall getColonneEStringParserRuleCall_1_0() { return cColonneEStringParserRuleCall_1_0; }
		
		//'=' | OP
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }
		
		//OP
		public RuleCall getOPTerminalRuleCall_2_1() { return cOPTerminalRuleCall_2_1; }
		
		//valeur=EString
		public Assignment getValeurAssignment_3() { return cValeurAssignment_3; }
		
		//EString
		public RuleCall getValeurEStringParserRuleCall_3_0() { return cValeurEStringParserRuleCall_3_0; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.csvmanl.CsvMan.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cColonneAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cColonneEStringParserRuleCall_1_0 = (RuleCall)cColonneAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueEStringParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//Parameter:
		//	{Parameter} colonne=EString '=' value=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{Parameter} colonne=EString '=' value=EString
		public Group getGroup() { return cGroup; }
		
		//{Parameter}
		public Action getParameterAction_0() { return cParameterAction_0; }
		
		//colonne=EString
		public Assignment getColonneAssignment_1() { return cColonneAssignment_1; }
		
		//EString
		public RuleCall getColonneEStringParserRuleCall_1_0() { return cColonneEStringParserRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//value=EString
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//EString
		public RuleCall getValueEStringParserRuleCall_3_0() { return cValueEStringParserRuleCall_3_0; }
	}
	public class CsvTableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.csvmanl.CsvMan.CsvTable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCsvTableAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cColonneAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cColonneEStringParserRuleCall_2_1_0 = (RuleCall)cColonneAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cColonneAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cColonneEStringParserRuleCall_2_2_1_0 = (RuleCall)cColonneAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//CsvTable:
		//	{CsvTable} name=EString ('(' colonne+=EString (',' colonne+=EString)* ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{CsvTable} name=EString ('(' colonne+=EString (',' colonne+=EString)* ')')?
		public Group getGroup() { return cGroup; }
		
		//{CsvTable}
		public Action getCsvTableAction_0() { return cCsvTableAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//('(' colonne+=EString (',' colonne+=EString)* ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//colonne+=EString
		public Assignment getColonneAssignment_2_1() { return cColonneAssignment_2_1; }
		
		//EString
		public RuleCall getColonneEStringParserRuleCall_2_1_0() { return cColonneEStringParserRuleCall_2_1_0; }
		
		//(',' colonne+=EString)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//colonne+=EString
		public Assignment getColonneAssignment_2_2_1() { return cColonneAssignment_2_2_1; }
		
		//EString
		public RuleCall getColonneEStringParserRuleCall_2_2_1_0() { return cColonneEStringParserRuleCall_2_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}
	public class CommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.csvmanl.CsvMan.Comment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cML_COMMENTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSL_COMMENTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Comment:
		//	ML_COMMENT | SL_COMMENT;
		@Override public ParserRule getRule() { return rule; }
		
		//ML_COMMENT | SL_COMMENT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ML_COMMENT
		public RuleCall getML_COMMENTTerminalRuleCall_0() { return cML_COMMENTTerminalRuleCall_0; }
		
		//SL_COMMENT
		public RuleCall getSL_COMMENTTerminalRuleCall_1() { return cSL_COMMENTTerminalRuleCall_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.csvmanl.CsvMan.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//EString:
		//	STRING | ID | INT;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID | INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	
	
	private final ProgramElements pProgram;
	private final InstructionElements pInstruction;
	private final DeleteElements pDelete;
	private final CopyElements pCopy;
	private final CreateElements pCreate;
	private final LoadElements pLoad;
	private final ShowElements pShow;
	private final UpdateElements pUpdate;
	private final AddElements pAdd;
	private final JoinElements pJoin;
	private final RemoveElements pRemove;
	private final ExitElements pExit;
	private final WhereElements pWhere;
	private final ConditionElements pCondition;
	private final ParameterElements pParameter;
	private final CsvTableElements pCsvTable;
	private final CommentElements pComment;
	private final EStringElements pEString;
	private final TerminalRule tOP;
	private final TerminalRule tNL;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CsvManGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pInstruction = new InstructionElements();
		this.pDelete = new DeleteElements();
		this.pCopy = new CopyElements();
		this.pCreate = new CreateElements();
		this.pLoad = new LoadElements();
		this.pShow = new ShowElements();
		this.pUpdate = new UpdateElements();
		this.pAdd = new AddElements();
		this.pJoin = new JoinElements();
		this.pRemove = new RemoveElements();
		this.pExit = new ExitElements();
		this.pWhere = new WhereElements();
		this.pCondition = new ConditionElements();
		this.pParameter = new ParameterElements();
		this.pCsvTable = new CsvTableElements();
		this.pComment = new CommentElements();
		this.pEString = new EStringElements();
		this.tOP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.csvmanl.CsvMan.OP");
		this.tNL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.csvmanl.CsvMan.NL");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.csvmanl.CsvMan".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	{Program} (instruction+=Instruction NL)*;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Instruction:
	//	Create | Load | Show | Update | Add | Join | Delete | Exit | Comment | Copy | Remove;
	public InstructionElements getInstructionAccess() {
		return pInstruction;
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}
	
	//Delete:
	//	{Delete}
	//	'delete' csvtable=[CsvTable];
	public DeleteElements getDeleteAccess() {
		return pDelete;
	}
	
	public ParserRule getDeleteRule() {
		return getDeleteAccess().getRule();
	}
	
	//Copy:
	//	{Copy}
	//	'copy' alias=[CsvTable] 'in' table=CsvTable;
	public CopyElements getCopyAccess() {
		return pCopy;
	}
	
	public ParserRule getCopyRule() {
		return getCopyAccess().getRule();
	}
	
	//Create:
	//	{Create}
	//	'create' csvtable=CsvTable;
	public CreateElements getCreateAccess() {
		return pCreate;
	}
	
	public ParserRule getCreateRule() {
		return getCreateAccess().getRule();
	}
	
	//Load:
	//	{Load}
	//	'load' fichier=EString 'as' csvtable=CsvTable;
	public LoadElements getLoadAccess() {
		return pLoad;
	}
	
	public ParserRule getLoadRule() {
		return getLoadAccess().getRule();
	}
	
	//Show:
	//	{Show}
	//	'show' csvtable=[CsvTable] ('(' colonne+=EString (',' colonne+=EString)* ')')? where=Where?;
	public ShowElements getShowAccess() {
		return pShow;
	}
	
	public ParserRule getShowRule() {
		return getShowAccess().getRule();
	}
	
	//Update:
	//	{Update}
	//	'update' csvtable=[CsvTable] 'set' parameter+=Parameter (',' parameter+=Parameter)* where=Where?;
	public UpdateElements getUpdateAccess() {
		return pUpdate;
	}
	
	public ParserRule getUpdateRule() {
		return getUpdateAccess().getRule();
	}
	
	//Add:
	//	{Add}
	//	'add' ('(' valeur+=EString (',' valeur+=EString)* ')' | '(' parameter+=Parameter (',' parameter+=Parameter)* ')')
	//	'in' csvtable=[CsvTable|EString];
	public AddElements getAddAccess() {
		return pAdd;
	}
	
	public ParserRule getAddRule() {
		return getAddAccess().getRule();
	}
	
	//Join:
	//	{Join}
	//	'join' tables+=[CsvTable] tables+=[CsvTable] 'in' table3=CsvTable;
	public JoinElements getJoinAccess() {
		return pJoin;
	}
	
	public ParserRule getJoinRule() {
		return getJoinAccess().getRule();
	}
	
	//Remove:
	//	{Remove}
	//	'remove' csvtable=[CsvTable] where=Where?;
	public RemoveElements getRemoveAccess() {
		return pRemove;
	}
	
	public ParserRule getRemoveRule() {
		return getRemoveAccess().getRule();
	}
	
	//Exit:
	//	{Exit}
	//	'exit';
	public ExitElements getExitAccess() {
		return pExit;
	}
	
	public ParserRule getExitRule() {
		return getExitAccess().getRule();
	}
	
	//Where:
	//	{Where}
	//	'where' condition+=Condition (',' condition+=Condition)*;
	public WhereElements getWhereAccess() {
		return pWhere;
	}
	
	public ParserRule getWhereRule() {
		return getWhereAccess().getRule();
	}
	
	//Condition:
	//	{Condition} colonne=EString ('=' | OP) valeur=EString;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//Parameter:
	//	{Parameter} colonne=EString '=' value=EString;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//CsvTable:
	//	{CsvTable} name=EString ('(' colonne+=EString (',' colonne+=EString)* ')')?;
	public CsvTableElements getCsvTableAccess() {
		return pCsvTable;
	}
	
	public ParserRule getCsvTableRule() {
		return getCsvTableAccess().getRule();
	}
	
	//Comment:
	//	ML_COMMENT | SL_COMMENT;
	public CommentElements getCommentAccess() {
		return pComment;
	}
	
	public ParserRule getCommentRule() {
		return getCommentAccess().getRule();
	}
	
	//EString:
	//	STRING | ID | INT;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//terminal OP:
	//	'<' | '>' | '>=' | '<=';
	public TerminalRule getOPRule() {
		return tOP;
	}
	
	//terminal NL:
	//	('\b' | '\t')* ('\r' | '\n' | ';')+;
	public TerminalRule getNLRule() {
		return tNL;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}

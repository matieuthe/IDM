/**
 * generated by Xtext 2.12.0
 */
package org.xtext.example.csvmanl.generator;

import com.google.common.collect.Iterators;
import csvManager.Add;
import csvManager.Condition;
import csvManager.Copy;
import csvManager.Create;
import csvManager.Delete;
import csvManager.Exit;
import csvManager.Instruction;
import csvManager.Join;
import csvManager.Load;
import csvManager.Parameter;
import csvManager.Program;
import csvManager.Show;
import csvManager.Update;
import csvManager.Where;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class CsvManGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    fsa.generateFile("CsvMan.java", this.compile(IterableExtensions.<Program>head(IteratorExtensions.<Program>toIterable(Iterators.<Program>filter(resource.getAllContents(), Program.class)))).toString());
    InputOutput.<String>println("execution !");
  }
  
  protected CharSequence _compile(final Program program) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import org.apache.commons.csv.CSVFormat;");
    _builder.newLine();
    _builder.append("import org.apache.commons.csv.CSVParser;");
    _builder.newLine();
    _builder.append("import org.apache.commons.csv.CSVPrinter;");
    _builder.newLine();
    _builder.append("import org.apache.commons.csv.CSVRecord;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.io.*;");
    _builder.newLine();
    _builder.append("import java.nio.file.Files;");
    _builder.newLine();
    _builder.append("import java.nio.file.Paths;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class CsvMan {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private Map<String, String> aliasMaps;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private String[] tempTab1;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("int index1;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private String[] tempTab2;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("int index2;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public CsvMan(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.aliasMaps = new HashMap<>();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.tempTab1 = new String[0];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.tempTab2 = new String[0];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.index1 = 0;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.index2 = 0;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void resetTab1(int length){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.tempTab1 = new String[length];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.index1 = 0;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void resetTab2(int length){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.tempTab2 = new String[length];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.index2 = 0;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void addElmtTab1(String elmt){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.tempTab1[index1++] = elmt;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void addElmtTab2(String elmt){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.tempTab2[index2++] = elmt;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public String[] getTempTab1(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this.tempTab1;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public String[] getTempTab2(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this.tempTab2;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private CSVParser getParser(String alias) throws Exception{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("String fileName = this.aliasMaps.get(alias);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (fileName == null) throw new Exception();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Reader reader = Files.newBufferedReader(Paths.get(fileName));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return new CSVParser(reader, CSVFormat.DEFAULT");
    _builder.newLine();
    _builder.append("                ");
    _builder.append(".withFirstRecordAsHeader()");
    _builder.newLine();
    _builder.append("                ");
    _builder.append(".withIgnoreHeaderCase()");
    _builder.newLine();
    _builder.append("                ");
    _builder.append(".withTrim());");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private void writeIn(String alias, String res) throws Exception{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Writer fileWriter = new FileWriter(this.aliasMaps.get(alias), false); //overwrites file");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("fileWriter.write(res);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("fileWriter.flush();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("fileWriter.close();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private String getHeader(CSVParser parser){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Map<String,Integer> headerMap = parser.getHeaderMap();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("String res = \"\";");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("for (int i = 0; i < headerMap.size(); i++) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("for (String key : headerMap.keySet()) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if (headerMap.get(key) == i) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("res += key;");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("if (i != headerMap.size() - 1)");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("res += \",\";");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return res + \"\\n\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*  Create a new CSV File");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void create(String filename, String...args){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("try{");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("BufferedWriter writer = Files.newBufferedWriter(Paths.get(filename + \".csv\"));");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("CSVPrinter csvPrinter = new CSVPrinter(writer, CSVFormat.DEFAULT.withHeader(args));");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("csvPrinter.flush();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("this.aliasMaps.put(filename, filename + \".csv\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("String columns = \"\";");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("for(String temp : args) columns += temp + \", \";");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("columns = columns.substring(0, columns.length()-2);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("System.out.println(\"File \" + filename + \".csv was created with columns : \" + columns);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} catch (IOException e) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*  Load an existing csv file with an alias");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void load(String filename, String alias){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("File tmpFile = new File(filename);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if(tmpFile.exists()){");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("this.aliasMaps.put(alias, filename);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("System.out.println(alias + \" was loaded\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}else");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("System.out.println(filename + \" doesn\'t exist\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*  delete a csv file with his alias");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void delete(String alias){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("String fileName = this.aliasMaps.get(alias);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if(fileName != null){");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("File file = new File(fileName);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if(file.delete()){");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("System.out.println(\"File \" + alias + \".csv deleted\");");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("this.aliasMaps.remove(alias);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("System.out.println( \"Alias \" + alias + \" doesn\'t exists\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*  delete a tuple regarding parameters");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void delete(String alias, String[] conditions){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("String res = \"\";");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("CSVParser csvParser = this.getParser(alias);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Map<String, Integer> headerMap = csvParser.getHeaderMap();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("res += this.getHeader(csvParser);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("//Mise à jour des lignes consernées");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("for (CSVRecord record : csvParser) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("boolean b = true;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("for(int i = 0; i < conditions.length; i+=2){");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("if(!record.get(conditions[i].trim()).equals(conditions[i+1])){");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("b = false;");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("//Si la ligne ne remplit pas la condition elle n\'est pas recopié dans le nouveau fichier");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if(!b) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("for (int i = 0; i < record.size(); i++) {");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("res += record.get(i);");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("if (i < record.size() - 1) res += \",\";");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("res += \"\\n\";");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("this.writeIn(alias, res);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} catch (Exception e){");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void show(String alias){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("show(alias, new String[0], new String[0]);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void show(String alias, String[] selected){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("show(alias, selected, new String[0]);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void show(String alias, String[] selected, String[] condition) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("System.out.println(\"\\n\");");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("boolean printAll = (selected.length == 0);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("boolean noCondition = (condition.length == 0);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("CSVParser csvParser = this.getParser(alias);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Map<String, Integer> headerMap = csvParser.getHeaderMap();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if(printAll){");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("System.out.print(this.getHeader(csvParser));");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                ");
    _builder.append("for (CSVRecord record : csvParser) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("String res = \"\";");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("boolean b = true;");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("//On vérifie les conditions avant l\'affichage");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("for(int i = 0; i < condition.length; i+=2){");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("if(!record.get(condition[i].trim()).equals(condition[i+1])){");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("b = false;");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("if(b) {");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("for (int i = 0; i < record.size() - 1; i++) {");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("System.out.print(record.get(i) + \",\");");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("if (record.size() - 1 >= 0) {");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("System.out.print(record.get(record.size() - 1));");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("System.out.println();");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}else{");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("String res = \"\";");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("//Affichage des entêtes");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("for(int i = 0; i < selected.length; i++){");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("if(headerMap.containsKey(selected[i].trim())){");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("res += selected[i];");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("if(i < selected.length-1)");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("res += \",\";");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("}else throw new Exception();");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                ");
    _builder.append("System.out.println(res);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                ");
    _builder.append("for(CSVRecord record : csvParser) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("boolean b = true;");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("//On vérifie les conditions avant l\'affichage");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("for(int i = 0; i < condition.length; i+=2){");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("if(!record.get(condition[i].trim()).equals(condition[i+1])){");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("b = false;");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("if(b) {");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("for (int i = 0; i < selected.length - 1; i++) {");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("System.out.print(record.get(selected[i]) + \",\");");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("if (selected.length - 1 >= 0) {");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("System.out.print(record.get(selected[selected.length - 1]));");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("System.out.println();");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("System.out.println(\"\\n\");");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} catch (Exception e){");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*  Add a tuple regarding given columns");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void add(String alias, String[] parameters){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("CSVParser csvParser = this.getParser(alias);");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("Map<String, Integer> header = csvParser.getHeaderMap();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("//String[] resultat = new String[header.size()];");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("if(parameters.length > header.size()) new Exception(\"Ce champ n\'existe pas\");");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("/*");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("for(int i = 0; i < parameters.length; i+=2){");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("if(header.containsKey(parameters[i].trim())){");
    _builder.newLine();
    _builder.append("\t                    ");
    _builder.append("resultat[header.get(parameters[i])] = parameters[i+1];");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("}else throw new Exception(\"Ce champ n\'existe pas\");");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("}*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("String res = \"\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("for(int i = 0; i < parameters.length - 1; i++){");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("if(parameters[i] == null)");
    _builder.newLine();
    _builder.append("\t                    ");
    _builder.append("res += \",\";");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("else");
    _builder.newLine();
    _builder.append("\t                    ");
    _builder.append("res += parameters[i] + \",\";");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if(parameters.length - 1 >= 0 && parameters[parameters.length -1] != null) res += parameters[parameters.length -1];");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("res+= \"\\n\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("Writer fileWriter = new FileWriter(this.aliasMaps.get(alias), true); //appended in file");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("fileWriter.write(res);");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("fileWriter.flush();");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("fileWriter.close();\t        ");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("}catch (Exception e) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void update(String alias, String[] parameter) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.update(alias, parameter, new String[0]);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void update(String alias, String[] parameter, String[] conditions) {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("//On lit completement le fichier et on le stocke dans un String");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("String res = \"\";");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("CSVParser csvParser = this.getParser(alias);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Map<String, Integer> headerMap = csvParser.getHeaderMap();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("String[] cles = new String[headerMap.size()];");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("String[] nValue = new String[headerMap.size()];");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("boolean[] toModify = new boolean[headerMap.size()];");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("//Recopie des entêtes");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("for (int i = 0; i < headerMap.size(); i++) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("for (String key : headerMap.keySet()) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("if (headerMap.get(key) == i) {");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("cles[i] = key.trim();");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("res += key;");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("if (i != headerMap.size() - 1)");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("res += \",\";");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("res+= \"\\n\";");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("for(int i = 0; i < parameter.length; i+=2){");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("for(int j = 0; j < cles.length; j++){");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("if(cles[j].equals(parameter[i])){");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("toModify[j] = true;");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("nValue[j] = parameter[i+1];");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("//Mise à jour des lignes consernées");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("for (CSVRecord record : csvParser) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("boolean b = true;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("for(int i = 0; i < conditions.length; i+=2){");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("if(!record.get(conditions[i].trim()).equals(conditions[i+1])){");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("b = false;");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                ");
    _builder.append("for(int i = 0; i < record.size(); i++){");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("if(toModify[i] && b){");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("res += nValue[i];");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("}else{");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("res += record.get(i);");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("if(i < record.size()-1) res += \",\";");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("res += \"\\n\";");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("//Write the res in the file");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("this.writeIn(alias, res);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} catch (Exception e){");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void join(String alias1, String alias2, String alias3){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("CSVParser csvParser1 = this.getParser(alias1);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("CSVParser csvParser2 = this.getParser(alias2);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("String res = \"\";");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Map<String, Integer> headerMap1 = csvParser1.getHeaderMap();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Map<String, Integer> headerMap2 = csvParser1.getHeaderMap();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("//On regarde que les deux fichier ont le même header");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("boolean b = (headerMap1.size() == headerMap2.size());");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if(b){");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("for(String key : headerMap1.keySet()){");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("if(!headerMap2.containsKey(key)) {");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("b = false;");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("//On créé un fichier à partir des deux autres");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if(b){");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("//Recopie des entêtes");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("res+= this.getHeader(csvParser1);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                ");
    _builder.append("//On parcourt le fichier 1");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("for (CSVRecord record : csvParser1) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("for(int i = 0; i < record.size(); i++){");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("res += record.get(i);");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("if(i < record.size()-1) res += \",\";");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("res += \"\\n\";");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                ");
    _builder.append("//On parcourt le fichier 2");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("for (CSVRecord record : csvParser2) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("for(int i = 0; i < record.size(); i++){");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("res += record.get(i);");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("if(i < record.size()-1) res += \",\";");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("res += \"\\n\";");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                ");
    _builder.append("//On ecrit le resultat dans un fichier");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("this.writeIn(alias1, res);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}catch (Exception e){");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static void main(String[] args){");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("CsvMan man = new CsvMan();");
    _builder.newLine();
    {
      EList<Instruction> _instruction = program.getInstruction();
      for(final Instruction exp : _instruction) {
        _builder.append("\t\t");
        Object _compile = this.compile(exp);
        _builder.append(_compile, "\t\t");
        _builder.append("\t\t\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  /**
   * Load Function
   */
  protected CharSequence _compile(final Load load) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("man.load(\"");
    String _table = load.getTable();
    _builder.append(_table);
    _builder.append("\", \"");
    String _alias = load.getAlias();
    _builder.append(_alias);
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  /**
   * Create Function
   */
  protected CharSequence _compile(final Create created) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("man.resetTab1(");
    int _length = ((Object[])Conversions.unwrapArray(created.getColonne(), Object.class)).length;
    _builder.append(_length);
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    {
      EList<String> _colonne = created.getColonne();
      for(final String exp : _colonne) {
        _builder.append("man.addElmtTab1(\"");
        _builder.append(exp);
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("man.create(\"");
    String _table = created.getTable();
    _builder.append(_table);
    _builder.append("\", man.getTempTab1());");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  /**
   * Show function
   */
  protected CharSequence _compile(final Show show) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("man.resetTab1(");
    int _length = ((Object[])Conversions.unwrapArray(show.getColonne(), Object.class)).length;
    _builder.append(_length);
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    {
      EList<String> _colonne = show.getColonne();
      for(final String exp : _colonne) {
        _builder.append("man.addElmtTab1(\"");
        _builder.append(exp);
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      Where _where = show.getWhere();
      boolean _tripleNotEquals = (_where != null);
      if (_tripleNotEquals) {
        Object _compile = this.compile(show.getWhere());
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("man.show(\"");
    String _table = show.getTable();
    _builder.append(_table);
    _builder.append("\", man.getTempTab1(), man.getTempTab2());");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  /**
   * Update function
   */
  protected CharSequence _compile(final Update update) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("man.resetTab1(");
    int _length = ((Object[])Conversions.unwrapArray(update.getParameter(), Object.class)).length;
    _builder.append(_length);
    _builder.append("*2);");
    _builder.newLineIfNotEmpty();
    {
      EList<Parameter> _parameter = update.getParameter();
      for(final Parameter exp : _parameter) {
        _builder.append("man.addElmtTab1(\"");
        String _colonne = exp.getColonne();
        _builder.append(_colonne);
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("man.addElmtTab1(\"");
        String _value = exp.getValue();
        _builder.append(_value);
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      Where _where = update.getWhere();
      boolean _tripleNotEquals = (_where != null);
      if (_tripleNotEquals) {
        Object _compile = this.compile(update.getWhere());
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("man.update(\"");
    String _table = update.getTable();
    _builder.append(_table);
    _builder.append("\", man.getTempTab1(), man.getTempTab2());");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  /**
   * Add
   */
  protected CharSequence _compile(final Add add) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("man.resetTab1(");
    int _length = ((Object[])Conversions.unwrapArray(add.getValeur(), Object.class)).length;
    _builder.append(_length);
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    {
      EList<String> _valeur = add.getValeur();
      for(final String exp : _valeur) {
        _builder.append("man.addElmtTab1(\"");
        _builder.append(exp);
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("man.add(\"");
    String _table = add.getTable();
    _builder.append(_table);
    _builder.append("\", man.getTempTab1());");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  /**
   * EXIT
   */
  protected CharSequence _compile(final Copy copy) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("man.copy(\"");
    String _table = copy.getTable();
    _builder.append(_table);
    _builder.append("\", \"");
    String _alias = copy.getAlias();
    _builder.append(_alias);
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  /**
   * EXIT
   */
  protected CharSequence _compile(final Exit exit) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("return;");
    _builder.newLine();
    return _builder;
  }
  
  /**
   * Delete function
   */
  protected CharSequence _compile(final Delete delete) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Where _where = delete.getWhere();
      boolean _tripleNotEquals = (_where != null);
      if (_tripleNotEquals) {
        Object _compile = this.compile(delete.getWhere());
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
        _builder.append("man.delete(\"");
        String _table = delete.getTable();
        _builder.append(_table);
        _builder.append("\", man.getTempTab2());");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("man.delete(\"");
        String _table_1 = delete.getTable();
        _builder.append(_table_1);
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  /**
   * Join function
   */
  protected CharSequence _compile(final Join join) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("man.join(\"");
    String _table1 = join.getTable1();
    _builder.append(_table1);
    _builder.append("\", \"");
    String _table2 = join.getTable2();
    _builder.append(_table2);
    _builder.append("\", \"");
    String _table3 = join.getTable3();
    _builder.append(_table3);
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected CharSequence _compile(final Where where) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("man.resetTab2(");
    int _length = ((Object[])Conversions.unwrapArray(where.getCondition(), Object.class)).length;
    _builder.append(_length);
    _builder.append("*2);");
    _builder.newLineIfNotEmpty();
    {
      EList<Condition> _condition = where.getCondition();
      for(final Condition exp : _condition) {
        _builder.append("man.addElmtTab2(\"");
        String _atribut = exp.getAtribut();
        _builder.append(_atribut);
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("man.addElmtTab2(\"");
        String _valeur = exp.getValeur();
        _builder.append(_valeur);
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  protected CharSequence _compile(final Instruction instruction) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder;
  }
  
  public CharSequence compile(final EObject add) {
    if (add instanceof Add) {
      return _compile((Add)add);
    } else if (add instanceof Copy) {
      return _compile((Copy)add);
    } else if (add instanceof Create) {
      return _compile((Create)add);
    } else if (add instanceof Delete) {
      return _compile((Delete)add);
    } else if (add instanceof Exit) {
      return _compile((Exit)add);
    } else if (add instanceof Join) {
      return _compile((Join)add);
    } else if (add instanceof Load) {
      return _compile((Load)add);
    } else if (add instanceof Show) {
      return _compile((Show)add);
    } else if (add instanceof Update) {
      return _compile((Update)add);
    } else if (add instanceof Instruction) {
      return _compile((Instruction)add);
    } else if (add instanceof Program) {
      return _compile((Program)add);
    } else if (add instanceof Where) {
      return _compile((Where)add);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(add).toString());
    }
  }
}
